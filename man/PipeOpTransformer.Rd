% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTransformer.R
\name{PipeOpTransformer}
\alias{PipeOpTransformer}
\title{PipeOpTransformer}
\format{
Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.
}
\description{
Parent class for \code{\link{PipeOp}}s that transform task objects top different types.
}
\section{Input and Output Channels}{

\code{\link{PipeOpTransformer}} has one input and output channel named \code{"input"} and \code{"output"}.
In training and testing these expect and produce \link[mlr3:Task]{mlr3::Task} objects with the type depending on
the transformers.
}

\section{State}{

The \verb{$state} is left empty (\code{list()}).
}

\section{Internals}{

The commonality of methods using \code{\link{PipeOpTransformer}} is that they take a \link[mlr3:Task]{mlr3::Task} of
one class and transform it to another class. This usually involves transformation of the data,
which can be controlled via parameters.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\seealso{
Other PipeOps: 
\code{\link{PipeOpPredTaskSurvRegr}},
\code{\link{PipeOpPredTransformer}},
\code{\link{PipeOpTaskTransformer}},
\code{\link{mlr_pipeops_trafopred_regrsurv}},
\code{\link{mlr_pipeops_trafopred_survregr}},
\code{\link{mlr_pipeops_trafotask_regrsurv}},
\code{\link{mlr_pipeops_trafotask_survregr}}

Other Transformers: 
\code{\link{PipeOpPredTaskSurvRegr}},
\code{\link{PipeOpPredTransformer}},
\code{\link{PipeOpTaskTransformer}}
}
\concept{PipeOps}
\concept{Transformers}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpTransformer}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PipeOpTransformer$new()}}
\item \href{#method-train_internal}{\code{PipeOpTransformer$train_internal()}}
\item \href{#method-predict_internal}{\code{PipeOpTransformer$predict_internal()}}
\item \href{#method-clone}{\code{PipeOpTransformer$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict">}\href{../../mlr3pipelines/html/PipeOp.html#method-predict}{\code{mlr3pipelines::PipeOp$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print">}\href{../../mlr3pipelines/html/PipeOp.html#method-print}{\code{mlr3pipelines::PipeOp$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train">}\href{../../mlr3pipelines/html/PipeOp.html#method-train}{\code{mlr3pipelines::PipeOp$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTransformer$new(
  id,
  param_set = ParamSet$new(),
  param_vals = list(),
  packages = character(0),
  input = data.table(),
  output = data.table()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-train_internal"></a>}}
\if{latex}{\out{\hypertarget{method-train_internal}{}}}
\subsection{Method \code{train_internal()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTransformer$train_internal(inputs)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-predict_internal"></a>}}
\if{latex}{\out{\hypertarget{method-predict_internal}{}}}
\subsection{Method \code{predict_internal()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTransformer$predict_internal(inputs)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpTransformer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
