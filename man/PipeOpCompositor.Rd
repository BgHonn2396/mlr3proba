% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpCompositor.R
\docType{data}
\name{PipeOpCompositor}
\alias{PipeOpCompositor}
\title{PipeOpCompositor}
\format{Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.}
\description{
Parent class for \code{\link{PipeOp}}s that composes (combines) multiple learners. Implements the \code{$train_internal()}
and \code{$predict_internal()} methods necessary for a \code{PipeOp}. The inputs and outputs will depend on
the exact composition defined in the child classes.
}
\details{
Ensembling is perhaps the most common form of composition, in which the predictions from multiple learners
are composed in some way. Composition is the abstract parent class as it allows a learner to be adapted
in an abstract way to create more complex results.
}
\section{Construction}{

Note: This object is typically constructed via a derived class, e.g. \code{\link{PipeOpClassifAvg}} or \code{\link{PipeOpRegrAvg}}.\preformatted{PipeOpCompositor$new(innum = 0, id, param_set = ParamSet$new(), param_vals = list(), packages = character(0), prediction_type = "Prediction")
}
\itemize{
\item \code{innum} :: \code{numeric(1)}\cr
Determines the number of input channels.
If \code{innum} is 0 (default), a vararg input channel is created that can take an arbitrary number of inputs.
\item \code{id} :: \code{character(1)}\cr
Identifier of the resulting  object.
\item \code{param_set} :: \code{\link[paradox:ParamSet]{ParamSet}}\cr
("Hyper"-)Parameters in form of a \code{\link[paradox:ParamSet]{ParamSet}} for the resulting \code{\link{PipeOp}}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
\item \code{packages} :: \code{character}\cr
Set of packages required for this \code{PipeOp}. These packages are loaded during \code{$train()} and \code{$predict()}, but not attached.
Default \code{character(0)}.
\item \code{prediction_type} :: \code{character(1)}\cr
The \code{predict} entry of the \code{$input} and \code{$output} type specifications.
Should be \code{"Prediction"} (default) or one of its subclasses, e.g. \code{"PredictionClassif"}, and correspond to the type accepted by
\code{$train_internal()} and \code{$predict_internal()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpCompositor}} has multiple input channels depending on the \code{innum} construction argument, named \code{"input1"}, \code{"input2"}, ...
if \code{innum} is nonzero; if \code{innum} is 0, there is only one \emph{vararg} input channel named \code{"..."}.
Input and output channels vary depending on the exact composition method used. Often (but not always)
only the \code{\link[mlr3:Prediction]{Prediction}} is used in inputs and ouputs, producing \code{NULL} during training.
}

\section{State}{

The \code{$state} is left empty (\code{list()}).
}

\section{Internals}{

The commonality of ensemble methods using \code{\link{PipeOpCompositor}} is that they take a \code{NULL}-input during training and save an empty \code{$state}. They can be
used following a set of \code{\link{PipeOpLearner}} \code{\link{PipeOp}}s to perform composition of fitted models. See e.g.
\code{\link{PipeOpClassifAvg}} and \code{\link{PipeOpDistrCompositor}} which both inherit from this class.

Should it be necessary to use the output of preceding \code{\link[mlr3:Learner]{Learner}}s
during the "training" phase, then \code{\link{PipeOpCompositor}} should not be used. In fact, if training time behaviour of a \code{\link[mlr3:Learner]{Learner}} is important, then
one should use a \code{\link{PipeOpLearnerCV}} instead of a \code{\link{PipeOpLearner}}, and the ensemble can be created with a \code{\link[mlr3:Learner]{Learner}} encapsulated by a \code{\link{PipeOpLearner}}.
See \code{\link{LearnerClassifAvg}} and \code{\link{LearnerRegrAvg}} for examples.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\seealso{
Other PipeOps: \code{\link{mlr_pipeops_distrcompose}}

Other Ensembles: \code{\link{mlr_pipeops_distrcompose}}
}
\concept{Ensembles}
\concept{PipeOps}
\keyword{datasets}
